<!DOCTYPE html>

<html>
  <head>
    <title>Ortholog Group Members In Fixed Taxonomy Tree</title>
<!--<link rel="stylesheet" href="{{css_uri}}" />-->
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js" charset="utf-8"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/2.2.2/bootstrap.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/d3-legend/1.3.0/d3-legend.min.js"></script>

<!--    {{adjust_iframe_height_script}} -->
<style>
path.arc {
  cursor: move;
  fill: #fff;
}

.node.active {
  fill: tomato !important;
}

.circle.active {
  fill: tomato !important;
}

.link {
  fill: none;
  stroke: #ccc;
  stroke-width: 1.5px;
}


.node circle {
  cursor: pointer;
  stroke: limegreen;
  stroke-width: 1.0px;
}

span#tooltip{
     position: absolute;
     z-index: 10;
     visibility: hidden;
     padding: 0 5px;
     border: 1px solid #000;
     border-radius: 3px;
     background-color: #333;
     color: #fff;
     font-size: 11px;
     opacity: 0.8;
}

.node text {
  font-size: 6px;
  font-family: "arial narrow";
}

path.link {
  fill: none;
  stroke: #ccc;
  stroke-width: 1.5px;
}

</style>
<script type="text/javascript">
function draw(_id,_fileName,_opts,_rootName,_tips,_width) {
  var w = 800,
      h = 800,
      rx = w / 2,
      ry = h / 2,
      m0,
      rotate = 0;

  var cluster = d3.layout.cluster()
    .size([360, ry - 120])
    .sort(null);

  var diagonal = d3.svg.diagonal.radial()
    .projection(function(d) { return [d.y, d.x / 180 * Math.PI]; });

  var svg = d3.select(_id).append("div")
    .style("width", w + "px")
    .style("height", w + "px");

  var tooltip = d3.select("body").select("#tooltip");

  var vis = svg.append("svg:svg")
    .attr("width", w)
    .attr("height", w)
    .append("svg:g")
    .attr("transform", "translate(" + rx + "," + ry + ")");

   vis.append("svg:path")
     .attr("class", "arc")
     .attr("d", d3.svg.arc().innerRadius(ry - 120).outerRadius(ry).startAngle(0).endAngle(2 * Math.PI));

  d3.json(_fileName, function(jsonfile) {
    console.log(jsonfile.features);
    var json = sparql2tree(jsonfile.features, _opts,'root');
        console.log(json);

    var nodes = cluster.nodes(json);

    var link = vis.selectAll("path.link")
      .data(cluster.links(nodes))
      .enter().append("svg:path")
      .attr("class", "link")
      .attr("d", diagonal);

    var node = vis.selectAll("g.node")
      .data(nodes)
      .enter().append("svg:g")
      .attr("class", function(d) { selector = d.taxid.replace(/http\S+\/(\d+)$/, "tax$1"); return "node " + selector; })
      .attr("transform", function(d) { return "rotate(" + (d.x - 90) + ")translate(" + d.y + ")"; })
      .on("mouseover", function(d) { highlight(d.children); return tooltip.style("visibility", "visible").text(d.name); })
      .on("mousemove", function(d){return tooltip.style("top", (event.pageY-20)+"px").style("left",(event.pageX+10)+"px");})
      .on("mouseout", function(d) { highlight(null); return tooltip.style("visibility", "hidden")});

    var colorScale = d3.scale.linear().domain([0, 1]).range(["#ffcc66", "#336600"]);

    var legendView = vis.append("svg:g")
     .attr("class", "legendLinear")
     .style("font-family", "arial narrow")
     .style("font-size","12px")
     .attr("transform", "translate(250,200)");

    var legendLinear = d3.legend.color()
	.cells(5)
        .scale(colorScale)
        .shapeWidth(20)
        .orient('horizontal')
        .labels(["0", "", "", "", "ratio 1"])
        .labelFormat(d3.format('d'));

     legendView.call(legendLinear);

     vis.append("svg:text")
      .attr("transform", "translate(250,280)")
      .style("font-size","13px")
      .style("font-family", "arial narrow")
      .style("fill", "black")
      .text('llllll  Number of paralogs');

     node.append("svg:circle")
      .attr("r", 4)
      .attr("class", function(d) { selector = d.taxid.replace(/http\S+\/(\d+)$/, "tax$1"); return "circle " + selector; })
      .attr("fill", function(d) { return d.ocnt == "0" ? '#fff' : colorScale(d.ratio); } )
      .style("stroke", function(d) {
        return d.ocnt == "0" ? "#999" : "#ddd";
        //return colorScale(d.ratio);
      });

     node.append("svg:text")
      .attr("dx", function(d) { return d.x < 180 ? 8 : -8; })
      .attr("dy", ".31em")
      .attr("text-anchor", function(d) { return d.x < 180 ? "start" : "end"; })
      .attr("transform", function(d) { return d.x < 180 ? null : "rotate(180)"; })
      .text(function(d) { if (d.rank.match(/phylum/i) || d.rank.match(/.*kingdom/i) || d.rank.match(/class/i)){ return d.name; }
          //else if (d.rank.match(/family/i)) { var grp = ''; var num = Number(d.mcnt); for(i=0; i<num; i++) {grp += 'l';} return grp;}
      });

     node.append("svg:text")
       .attr("dx", function(d) { return d.x < 180 ? 8 : -8; })
       .attr("dy", ".31em")
       .attr("fill", "green")
       .attr("text-anchor", function(d) { return d.x < 180 ? "start" : "end"; })
       .attr("transform", function(d) { return d.x < 180 ? null : "rotate(180)"; })
       .text(function(d) {
           if (d.rank.match(/family/i)) { var grp = ''; var num = 10 * Number(d.para) - 10; for(i=0; i<num; i++) {grp += 'l';} return grp;}
       });
  });

  function highlight(children) {
    if (children == null) {
      d3.selectAll(".node").classed("active", false);
      d3.selectAll(".circle").classed("active", false);
    }
    else  {
     for (i=0; i<children.length; i++) {
       slct = children[i].taxid.replace(/http\S+\/(\d+)$/, "tax$1");
       d3.selectAll(".node." + slct).classed("active", true);
       d3.selectAll(".circle." + slct).classed("active", true);
     }
    }
  }
  function mouse(e) {
    return [e.pageX - rx, e.pageY - ry];
  }

  function mousedown() {
    m0 = mouse(d3.event);
    d3.event.preventDefault();
  }

  function mousemove() {
    if (m0) {
      var m1 = mouse(d3.event),
        dm = Math.atan2(cross(m0, m1), dot(m0, m1)) * 180 / Math.PI,
        tx = "translate3d(0," + (ry - rx) + "px,0)rotate3d(0,0,0," + dm + "deg)translate3d(0," + (rx - ry) + "px,0)";
      svg
        .style("-moz-transform", tx)
        .style("-ms-transform", tx)
        .style("-webkit-transform", tx);
    }
  }

  function mouseup() {
    if (m0) {
      var m1 = mouse(d3.event),
          dm = Math.atan2(cross(m0, m1), dot(m0, m1)) * 180 / Math.PI,
          tx = "rotate3d(0,0,0,0deg)";
          rotate += dm;
          if (rotate > 360) rotate -= 360;
          else if (rotate < 0) rotate += 360;
          m0 = null;

       svg
        .style("-moz-transform", tx)
        .style("-ms-transform", tx)
        .style("-webkit-transform", tx);

       vis
        .attr("transform", "translate(" + rx + "," + ry + ")rotate(" + rotate + ")")
        .selectAll("g.node text")
        .attr("dx", function(d) { return (d.x + rotate) % 360 < 180 ? 8 : -8; })
        .attr("text-anchor", function(d) { return (d.x + rotate) % 360 < 180 ? "start" : "end"; })
        .attr("transform", function(d) { return (d.x + rotate) % 360 < 180 ? null : "rotate(180)"; });
    }
  }

  function cross(a, b) {
    return a[0] * b[1] - a[1] * b[0];
  }

  function dot(a, b) {
    return a[0] * b[0] + a[1] * b[1];
  }
}

function sparql2tree(data, opts, root) {
	var tree = d3.map();
	var component = new Array();
	var parent = blanch = true;
	for (var data_i = 0; data_i < data.length; data_i++) {
		var blanch = {};
		parent = (data[data_i][opts.parent]?data[data_i][opts.parent]:root);
		//console.log(parent);
		for (var key in opts) {
			//blanch[key] = (data[data_i][opts[key]]?data[data_i][opts[key]]:root);
			blanch[key] = data[data_i][opts[key]];
		}
		if (tree.has(parent)) {
			component = tree.get(parent);
		} else {
            component = new Array();
		}
		component.push(blanch);
		tree.set(parent, component);
	}
    function traverse(nodes) {
		var hash = new Array();
		if (nodes) {
			if (nodes.length > 1) {
				for (var index = 0 ; index < nodes.length ; index++) {
					var node = nodes[index];
					var result = {};
					for (var key in node) {
					  if (key != 'children') {
						result[key] = node[key];
					  } else {
						if (tree.get(node[key])) {
					  //console.log(key);
                      //console.log(node[key]);
                      //console.log(tree.get(node[key]));
						  result['size'] = tree.get(node[key]).length;
						  result[key] = traverse(tree.get(node[key]));
						}
					  }
					}
                hash.push(result);
              }
            } else if (nodes.length == 1)  {
              var node = nodes[0];
              var result = {};
              for (var key in node) {
                if (key != 'children') {
                  result[key] = node[key];
                } else {
                  if (tree.get(node[key])) {
                    //console.log(key);
                    //console.log(node[key]);
                    //console.log(tree.get(node[key]));
                    result['size'] = tree.get(node[key]).length;
                    result[key] = traverse(tree.get(node[key]));
                  }
                }
              }
              hash.push(result);
            }
          }
          return hash;
        }
        var result = {};
        for (var index = 0 ; index < tree.get(root).length ; index++) {
		//console.log(tree.get(root));
          var node = tree.get(root)[index];
          for (var key in node) {
            if (key != 'children') {
              result[key] = node[key];
            } else {
              if (tree.get(node[key])) {
                //console.log(node[key]);
                //console.log(tree.get(node[key]));
                result['size'] = tree.get(node[key]).length;
                result[key] = traverse(tree.get(node[key]));
              }
            }
          }
        }
	function delrank(node) {
console.log(node);
	    for (var j=0; j<node['children'].length; j++) {
		//	console.log('moto='+node['children']);
		if (node['children'][j]['children']) {
		     delrank(node['children'][j]);
		}
		if (!node['children'][j]['rank'] && node['children'][j]['children']) {
		    var tmplen = node['children'][j]['children'].length;

		    var tmparray = new Array();
		    for (l=0; l<tmplen; l++) {
			tmparray.push(node['children'][j]['children'][l]);
			//console.log(node['children'][j]['children'][l]);
		    }
		    //console.log(tmparray);
		    var spliced = node['children'].splice(j, 1);
		    //console.log('spliced=', spliced);
		    for (var k=0; k<tmparray.length; k++) {
			node['children'].push(tmparray[k]);
		    }
		    //delete node['children'][j];
		    //console.log('ato='+node['children'].length);
		    j = j - 1;
		    //console.log('j='+j, 'nodej='+node['children'][j]);
		}
	    }
	    return node;
	}
	var newnode = delrank(result);
	//return result;
	return newnode;
}
//    var frame_height = 290;
function init() {
    function adjust_iframe_height(height_px) {
      var height = 0;
      //var name = parent.document.getElementsByTagName('iframe')[0].id;
      //console.log(name);
      if(height_px) {
        height = height_px;
      } else {
        //height = document.body.offsetHeight + 500;
        height = document.body.offsetHeight - 15;
      }
      parent.postMessage(JSON.stringify({height: height, id: name}), "*");
    }

   // param id input_file root view_width view_height default_posX default_posY
   adjust_iframe_height(800);
   var opts = {
          "parent": "parent",
          "children": "tax",
          "taxid": "tax",
          "name": "tax_label",
	  "cnt": "cnt",
          "ocnt": "ocnt",
          "ratio": "ratio",
          "para": "para",
          "rank": "rank"
   };
   var tips = {
        "name": "label",
        "cnt": "cnt",
        "rank": "rank"
   };
   var root = 'Cellular_ortanism';
   draw('#tax_tree','./ortholog_group_members_in_fixed_taxonomy_tree/resources/features?cluster_id={{param_cluster_id}}&dataset={{param_dataset}}',opts,'root',tips,900);
}
</script>
  </head>
  <body onload="init();">
    <div id="tax_tree"><span id="tooltip"></span></div>
  </body>
</html>
